name: Build and Tag Docker Image

on:
  push:
    branches:
      - main
      
jobs:
  build:
    name: Build API
    runs-on: ubuntu-latest
    env:
      working-directory: './src'
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
    - name: Restore dependencies
      run: dotnet restore TestApi_GitHub.sln
    - run: dotnet build --no-restore
    
  build-and-tag:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Build Tag and push Docker Image
        env:
          IMAGE_NAME: trialqinzrc.jfrog.io/mdpt-docker/jfrog-docker-example-image
          VERSION_TAG: v1.0.${{ github.run_number }}
        run: |
          jf docker build \
            -t $IMAGE_NAME:latest \
            -t $IMAGE_NAME:$VERSION_TAG \
            --file TestApi_GitHub/Dockerfile TestApi_GitHub

          jf docker push $IMAGE_NAME:latest
          jf docker push $IMAGE_NAME:$VERSION_TAG
          
      - name: Publish Build info With JFrog CLI
        env:
          # Generated and maintained by GitHub
          JFROG_CLI_BUILD_NAME: jfrog-docker-build-example
          # JFrog organization secret
          JFROG_CLI_BUILD_NUMBER : ${{ github.run_number }}
        run: |
          # Export the build name and build nuber
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish
